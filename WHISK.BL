import whisk,examples

# Declare goals and rules that can be used from other BL files in this project
export main,whisk,unit_tests,integration_tests,test

# Define goals that can be called
whisk = build_jar(files= [main, rglob(pattern='**', root='src/main/resources')], main_class='org.whisk.MainKt')

main = kotlin_compile(
    compiler= compiler_deps,
    srcs = [glob('src/main/kotlin/**.kt'), grammar],
    exported_deps=[log4j2_api, log4j2_core, implementation_deps, antlr4_runtime, java],
    cp=[compiler_deps, antlr4_compiler],
    kapt_processors=[dagger_compiler])

java = java_compile(
        srcs = protobuf_gen,
        exported_deps = protobuf_lib
    )

unit_tests = kotlin_test(
    compiler= [compiler_deps],
    srcs=[glob('src/test/kotlin/**.kt')],
    cp=[main, test_deps, junit4],
    friend_paths=main)

integration_tests = build_examples(whisk)

test = [unit_tests, integration_tests]

# Non-exposed goals that help building up the dependency graph
grammar = antlr_gen(tool=antlr4_compiler, srcs=glob('src/main/antlr/**.g4'), arguments = '-visitor')

protobuf_gen = protocol_compile(dist=protoc, srcs=glob('src/main/proto/**.proto'), imports='src/main/proto')

protoc = [on_windows(protoc_windows), on_linux(protoc_linux)]
protoc_linux = remote_file(url='https://github.com/protocolbuffers/protobuf/releases/download/v3.10.0/protoc-3.10.0-linux-x86_64.zip')
protoc_windows = remote_file(url='https://github.com/protocolbuffers/protobuf/releases/download/v3.10.0/protoc-3.10.0-win64.zip')

antlr4_runtime = prebuilt_jar('lib/antlr4-runtime-4.7.2.jar')

junit4 = remote_file(url='http://central.maven.org/maven2/junit/junit/4.12/junit-4.12.jar')

log4j2_api = remote_file(url='http://central.maven.org/maven2/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar')
log4j2_core = remote_file(url='http://central.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar')

dagger_compiler = maven_library(artifacts=['com.google.dagger:dagger-compiler:2.22.1'])

antlr4_compiler = maven_library(artifacts='org.antlr:antlr4:4.7.2')
protobuf_lib = maven_library(artifacts='com.google.protobuf:protobuf-java:3.10.0')

implementation_deps = maven_library(
    artifacts=['org.apache.maven:maven-resolver-provider:3.6.1',
               'org.apache.maven.resolver:maven-resolver-transport-http:1.4.0',
               'org.apache.maven.resolver:maven-resolver-connector-basic:1.4.0',
               'com.google.dagger:dagger:2.24',
               'org.jetbrains.kotlin:kotlin-reflect:1.3.50',
               'org.jetbrains.kotlin:kotlin-stdlib:1.3.50',
               'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50',
               'org.apache.logging.log4j:log4j-iostreams:2.12.1',
               'org.apache.logging.log4j:log4j-slf4j-impl:2.12.1',
               'org.apache.ant:ant-junit:1.10.6',
               'org.ow2.asm:asm:7.2',
               'com.github.javaparser:javaparser-core:3.15.0'])

test_deps = maven_library(artifacts=['org.assertj:assertj-core:3.13.2'])
compiler_deps = maven_library(artifacts=[
    'org.jetbrains.kotlin:kotlin-compiler-embeddable:1.3.50', 'org.jetbrains.kotlin:kotlin-annotation-processing-embeddable:1.3.50'])