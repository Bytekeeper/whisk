# Declare goals and rules that can be used from other BL files in this project
export main,whisk

# Define rules with "native" implementation
# Usually rules are defined by "rule(...) = value", omitting "= value" marks them as being implemented in code

# Rule to compile kotlin (and potentially java)
kotlin_compile(srcs:[], cp:[], exported_deps:[], kapt_processors: [], plugins: [])

# Rule to depend on maven artifacts (transitively)
maven_library(artifacts, sha1)

# Rule to build a jar from a list of files
build_jar(files:[],main_class)

# Rule to depend on a locally existing jar file
prebuilt_jar(binary_jar)

# Rule to depend on a remote file
remote_file(url, sha1)

# Rules marked with "anon" can also be called within other rule calls, ie. "rule(glob(..))" is allowed while "ruleA(ruleB(..))" will fail unless ruleB is anonymous.
# Rule to depend on files given a glob pattern (ie. "src/main/**.java")
anon glob(srcs:[])

# Rule to generate lexers and parsers from ANTLR grammars
antlr_gen(srcs: [], arguments: [])


# Define goals that can be called
whisk = build_jar(files= main, main_class='org.whisk.MainKt')
main = kotlin_compile(srcs = [glob('src/main/kotlin/**.kt'), grammar],
    cp=[],
    exported_deps=[log4j2_api, log4j2_core, kotlin_compiler, kotlin_stdlib, kotlin_reflect, annotations, antlr4,
    kotlin_stdlib_common, kotlin_stdlib_jdk7, kotlin_stdlib_jdk8, trove4j, maven_deps, junit4],
    kapt_processors=[dagger_compiler],
    plugins=[kap, tools])

# Non-exposed goals that help building up the dependency graph
grammar = antlr_gen(srcs=glob('src/main/antlr/**.g4'), arguments = '-visitor')

kotlin_stdlib = prebuilt_jar('lib/kotlin-stdlib-1.3.31.jar')
kotlin_stdlib_common = prebuilt_jar('lib/kotlin-stdlib-common-1.3.31.jar')
kotlin_stdlib_jdk7 = prebuilt_jar('lib/kotlin-stdlib-jdk7-1.3.31.jar')
kotlin_stdlib_jdk8 = prebuilt_jar('lib/kotlin-stdlib-jdk8-1.3.31.jar')
antlr4 = prebuilt_jar('lib/antlr4-runtime-4.7.2.jar')
tools = prebuilt_jar('/usr/lib/jvm/java-8-openjdk-amd64/lib/tools.jar')
annotations = prebuilt_jar('lib/annotations-13.0.jar')

junit4 = remote_file(url='http://central.maven.org/maven2/junit/junit/4.12/junit-4.12.jar', sha1='')
trove4j = remote_file(url='http://central.maven.org/maven2/org/jetbrains/intellij/deps/trove4j/1.0.20181211/trove4j-1.0.20181211.jar', sha1='')
log4j2_api = remote_file(url='http://central.maven.org/maven2/org/apache/logging/log4j/log4j-api/2.11.2/log4j-api-2.11.2.jar',sha1='')
log4j2_core = remote_file(url='http://central.maven.org/maven2/org/apache/logging/log4j/log4j-core/2.11.2/log4j-core-2.11.2.jar',sha1='')
kotlin_reflect = remote_file(url='http://central.maven.org/maven2/org/jetbrains/kotlin/kotlin-reflect/1.3.31/kotlin-reflect-1.3.31.jar',sha1='')
kap = remote_file(url='http://central.maven.org/maven2/org/jetbrains/kotlin/kotlin-annotation-processing-embeddable/1.3.31/kotlin-annotation-processing-embeddable-1.3.31.jar',sha1='')
kotlin_compiler = remote_file(url='http://central.maven.org/maven2/org/jetbrains/kotlin/kotlin-compiler-embeddable/1.3.31/kotlin-compiler-embeddable-1.3.31.jar',sha1='')

dagger_compiler = maven_library(artifacts=['com.google.dagger:dagger-compiler:2.22.1'], sha1='')
maven_deps = maven_library(
artifacts=['org.apache.maven:maven-resolver-provider:3.6.1',
           'org.apache.maven.resolver:maven-resolver-transport-http:1.3.3',
           'org.apache.maven.resolver:maven-resolver-connector-basic:1.3.3',
           'com.google.dagger:dagger:2.22.1', 'org.antlr:antlr4:4.7.2'], sha1=''
           )
